Last login: Tue Mar 11 15:40:45 on ttys000
rilliann@Rinas-MacBook-Air ~ % root
   ------------------------------------------------------------------
  | Welcome to ROOT 6.32.06                        https://root.cern |
  | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |
  | Built for macosxarm64 on Sep 21 2024, 18:21:53                   |
  | From tags/6-32-06@6-32-06                                        |
  | With Apple clang version 15.0.0 (clang-1500.3.9.4)               |
  | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q'  |
   ------------------------------------------------------------------

root [0] TFile *f = new TFile("/Users/rilliann/Downloads/fout_mw.root");
root [1] if (!f || f->IsZombie()) {
root (cont'ed, cancel with .@) [2]    std::cout << "Error: Cannot open ROOT file!" << std::endl;
root (cont'ed, cancel with .@) [3]} else {
root (cont'ed, cancel with .@) [4]    std::cout << "File opened successfully!" << std::endl;
root (cont'ed, cancel with .@) [5]}
File opened successfully!
root [6] KEY: TH2D run559362_AngularDistribution_1730353724349;1 AngularDistribution (5m59s window)
ROOT_prompt_6:1:56: error: expected ';' after expression
KEY: TH2D run559362_AngularDistribution_1730353724349;1 AngularDistribution (5m59s window)
                                                       ^
                                                       ;
ROOT_prompt_6:1:79: error: invalid suffix 'm59s' on integer constant
KEY: TH2D run559362_AngularDistribution_1730353724349;1 AngularDistribution (5m59s window)
                                                                              ^
root [7] TH2D *hist2D = (TH2D*)f->Get("run559362_AngularDistribution_1730353724349");
root [8] TH1D *phiHist = hist2D->ProjectionY("phiHist");
root [9] if (!phiHist) {
root (cont'ed, cancel with .@) [10]    std::cout << "Error: Projection failed!" << std::endl;
root (cont'ed, cancel with .@) [11]} else {
root (cont'ed, cancel with .@) [12]    std::cout << "Histogram loaded! Entries: " << phiHist->GetEntries() << std::endl;
root (cont'ed, cancel with .@) [13]}
Histogram loaded! Entries: 22
root [14] TCanvas *c1 = new TCanvas("c1", "Phi Projection", 800, 600);
root [15] phiHist->SetLineColor(kBlue);
root [16] phiHist->SetTitle("Phi Projection; Phi (rad); Entries");
root [17] phiHist->Draw();
root [18] c1->SaveAs("Phi_Projection.png");
Info in <TCanvas::Print>: file Phi_Projection.png has been created
root [19] double mean = phiHist->GetMean();
root [20] double stddev = phiHist->GetStdDev();
root [21] std::cout << "Mean: " << mean << ", Std Dev: " << stddev << std::endl; 
Mean: 3.12345, Std Dev: 1.80813
root [22] TH1D *deviationHist = (TH1D*)phiHist->Clone("deviationHist");
root [23] deviationHist->SetTitle("Deviations in Phi Projection; Phi (rad); Deviation (%)");
root [24] deviationHist->SetLineColor(kRed);
root [25] 
root [25] for (int i = 1; i <= phiHist->GetNbinsX(); i++) {
root (cont'ed, cancel with .@) [26]    double value = phiHist->GetBinContent(i); 
root (cont'ed, cancel with .@) [27]    double deviation = 100 * fabs((value - mean) / mean);  // % Deviation
root (cont'ed, cancel with .@) [28]    
root (cont'ed, cancel with .@) [28]    if (deviation >= 10) {
root (cont'ed, cancel with .@) [29]        deviationHist->SetBinContent(i, value);  // Keep only flagged bins
root (cont'ed, cancel with .@) [30]    } else {
root (cont'ed, cancel with .@) [31]        deviationHist->SetBinContent(i, 0);  // Ignore non-outliers
root (cont'ed, cancel with .@) [32]    }
root (cont'ed, cancel with .@) [33]}
root [34] TCanvas *c2 = new TCanvas("c2", "Outlier Detection", 800, 600);
root [35] phiHist->SetLineColor(kBlue);
root [36] phiHist->Draw();
root [37] deviationHist->SetLineColor(kRed);
root [38] deviationHist->Draw("same");
root [39] 
root [39] TLegend *legend = new TLegend(0.7, 0.7, 0.9, 0.9);
root [40] legend->AddEntry(phiHist, "Phi Projection", "l");
root [41] legend->AddEntry(deviationHist, "Flagged Deviations", "l");
root [42] legend->Draw();
root [43] 
root [43] c2->SaveAs("Phi_Outliers.png");
Info in <TCanvas::Print>: file Phi_Outliers.png has been created
root [44] TCanvas *c2 = new TCanvas("c2", "Outlier Detection", 800, 600);
root [45] phiHist->SetLineColor(kBlue);
root [46] phiHist->SetTitle("Phi Projection with Outliers; Phi (rad); Entries"); 
root [47] phiHist->Draw();
root [48] 
root [48] // Create a graph to store outlier points
root [49] TGraph *outlierGraph = new TGraph();
root [50] outlierGraph->SetMarkerStyle(20);  // Small dots
root [51] outlierGraph->SetMarkerSize(0.8);  // Adjust dot size
root [52] outlierGraph->SetMarkerColor(kRed); // Red for outliers
root [53] 
root [53] int outlierIndex = 0;
root [54] for (int i = 1; i <= phiHist->GetNbinsX(); i++) {
root (cont'ed, cancel with .@) [55]    double phiValue = phiHist->GetXaxis()->GetBinCenter(i); // Get bin center (X value)
root (cont'ed, cancel with .@) [56]    double binContent = phiHist->GetBinContent(i); // Get bin count (Y value)
root (cont'ed, cancel with .@) [57]    double deviation = 100 * fabs((binContent - mean) / mean);  // % Deviation
root (cont'ed, cancel with .@) [58]    
root (cont'ed, cancel with .@) [58]    if (deviation >= 10) {
root (cont'ed, cancel with .@) [59]        outlierGraph->SetPoint(outlierIndex, phiValue, binContent);
root (cont'ed, cancel with .@) [60]        outlierIndex++;
root (cont'ed, cancel with .@) [61]    }
root (cont'ed, cancel with .@) [62]}
root [63] 
root [63] outlierGraph->Draw("P SAME"); // "P" means points, "SAME" overlays on phiHist
root [64] 
root [64] // Add a legend
root [65] TLegend *legend = new TLegend(0.7, 0.7, 0.9, 0.9);
root [66] legend->AddEntry(phiHist, "Phi Projection", "l");
root [67] legend->AddEntry(outlierGraph, "Flagged Outliers", "p");
root [68] legend->Draw();
root [69] 
root [69] c2->SaveAs("Phi_Outliers.png");
Info in <TCanvas::Print>: file Phi_Outliers.png has been created
root [70] 
